// Optimal
class Solution {
public:
    vector<int> generate_rows(int row){   // function to return a list of elements for  Nth row
        vector<int> ansRow;
        ansRow.push_back(1);
        int ans=1;
        for(int i=1;i<row;i++){
            ans=ans*(row-i);
            ans=ans/(i);
            ansRow.push_back(ans);
        }
    return ansRow;
    }

    //The above function is generated by the approach that if the row no is 6th so the would be
    // 1 5 10 10 5 1 for which each element is calculated using nCr approach i.e (n-1)!/(c-1) now for a zero based indexing 
    // 1 5     10          10             5               1   
    // 1 5/1  5/1*4/2   5/1*4/2*3/3  5/1*4/2*3/3*2/4   5/1*4/2*3/3*2/4*1/5   which is basically the above formula

    // Now to calculate a complete row we can see a pattern
    // For 1st col it is row-1/1   (5/1) store this in an variable say ans then 
    // For 2nd col it is ans*row-2/2 (ans*4/2) store this in ans 
    // For 3rd col it is ans*row-3/3 (ans3/3)

    //The observation is that ans= ans*(row-col)/col this will give us the element 
    //now we can run a for loop from i= 1 to row  (as nth row only has n element) 
    // we store the generate row in an vector and return it
    

    vector<vector<int>> generate(int numRows) {
    vector<vector<int>> result;
    for(int i =1;i<=numRows;i++){  // iterate through the no. of rows
        result.push_back(generate_rows(i)); // gets the list of element for that rows
    }
    return result; // return the list of lists of all rows
        
    }
};

// after the function we just a nested loop that will run like
// Outer loop from row =1->n
//Inner loop from col =1->row (as Nth row contains N elements) i.e 1st row 1 element 2nd row 2 elements 3rd row 3 elements and so on
// then we just call the function which calculate the number and push it into a tempoparay list when we complete one iteration of the inner loop meaning we have gotten our row for that Nth so we push the row into the result array